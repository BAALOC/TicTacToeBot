from loader import bot
from telebot import types
from utils import logger
from config import GAMES_DICT
from handlers.game_handlers.game_utils import send_game_message
from keyboards import get_main_menu

@bot.callback_query_handler(func=lambda call: call.data.startswith('game#'))
def handle_gameboard_callback(call: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–ª–µ—Ç–∫—É –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è."""
    try:
        game_id, x, y = parse_callback_data(call.data)
        if not validate_move(game_id, x, y, call):
            return
        
        bot.answer_callback_query(call.id, '–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞')
        current_turn_id = GAMES_DICT[game_id]['current_turn']
        current_symbol = get_current_symbol(game_id, current_turn_id)

        update_board(game_id, x, y, current_symbol)
        logger.info(f'–ò–≥—Ä–æ–∫ {call.from_user.username} —Å–¥–µ–ª–∞–ª —Ö–æ–¥: {current_symbol} –Ω–∞ –∫–ª–µ—Ç–∫–µ ({x}, {y}) –≤ –∏–≥—Ä–µ {game_id}')

        send_game_message(game_id, call.message)
        handle_game_result(game_id, current_symbol, call.from_user.id)

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ handle_gameboard_callback: {e}', exc_info=True)
        bot.send_message(call.from_user.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ')

def parse_callback_data(data: str) -> tuple:
    """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ callback –∑–∞–ø—Ä–æ—Å–∞."""
    game_id, x, y = data.split('#')[1:]
    return int(game_id), int(x), int(y)

def get_current_symbol(game_id: int, current_turn_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞."""
    player1_id = GAMES_DICT[game_id]['player1']['id']
    player1_symbol = GAMES_DICT[game_id]['player1']['symbol']
    player2_symbol = GAMES_DICT[game_id]['player2']['symbol']
    
    return player1_symbol if current_turn_id == player1_id else player2_symbol

def update_board(game_id: int, x: int, y: int, symbol: str) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ —Å –Ω–æ–≤—ã–º —Å–∏–º–≤–æ–ª–æ–º."""
    GAMES_DICT[game_id]['board'][x][y].text = symbol
    
    current_player_id = GAMES_DICT[game_id]['current_turn']
    if current_player_id == GAMES_DICT[game_id]['player1']['id']:   
        GAMES_DICT[game_id]['current_turn'] = GAMES_DICT[game_id]['player2']['id']
    else:
        GAMES_DICT[game_id]['current_turn'] = GAMES_DICT[game_id]['player1']['id']

def handle_game_result(game_id: int, current_symbol: str, user_id: int) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É."""
    player1_id = GAMES_DICT[game_id]['player1']['id']
    player2_id = GAMES_DICT[game_id]['player2']['id']

    result = check_game_end(game_id)
    if result == 'draw':
        logger.info(f'–ò–≥—Ä–∞ {game_id} –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –≤–Ω–∏—á—å—é')
        message_text = 'ü§ù –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –≤–Ω–∏—á—å—é!'
        for player_id in [player1_id, player2_id]:
            bot.send_message(player_id, message_text, reply_markup=get_main_menu())
            
    elif result:
        logger.info(f'–ò–≥—Ä–æ–∫ {current_symbol} –≤—ã–∏–≥—Ä–∞–ª –∏–≥—Ä—É {game_id}')
        message_text = f'üéâ –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫: {current_symbol}'

        for player_id in [player1_id, player2_id]:
            bot.send_message(player_id, message_text, reply_markup=get_main_menu())

def validate_move(game_id: int, x: int, y: int, call: types.CallbackQuery) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ö–æ–¥ –¥–æ–ø—É—Å—Ç–∏–º—ã–º."""
    try:
        button_text = GAMES_DICT[game_id]['board'][x][y].text
        if button_text != '‚¨ú':
            logger.warning(f'–ö–ª–µ—Ç–∫–∞ ({x}, {y}) —É–∂–µ –∑–∞–Ω—è—Ç–∞ –≤ –∏–≥—Ä–µ {game_id}')
            bot.answer_callback_query(call.id, '–ö–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞')
            return False

        current_turn = GAMES_DICT[game_id]['current_turn']
        if current_turn != call.from_user.id:
            logger.info(f'–ò–≥—Ä–æ–∫ {call.from_user.username} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –Ω–µ –≤ —Å–≤–æ–π —Ö–æ–¥ –≤ –∏–≥—Ä–µ {game_id}')
            bot.answer_callback_query(call.id, '–°–µ–π—á–∞—Å –Ω–µ —Ç–≤–æ–π —Ö–æ–¥')
            return False
        
    except KeyError:
        logger.warning(f'–ò–≥—Ä–∞ {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        bot.answer_callback_query(call.id, '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return False

    return True 

def check_game_end(game_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞."""
    board = GAMES_DICT[game_id]['board']
    
    for row in board:
        if all(cell.text == '‚ùå' for cell in row) or all(cell.text == '‚≠ï' for cell in row):
            return True
    
    for col in range(3):
        if all(board[row][col].text == '‚ùå' for row in range(3)) or all(board[row][col].text == '‚≠ï' for row in range(3)):
            return True
    
    if board[0][0].text == board[1][1].text == board[2][2].text and board[0][0].text != '‚¨ú':
        return True
    if board[0][2].text == board[1][1].text == board[2][0].text and board[0][2].text != '‚¨ú':
        return True
    
    if all(cell.text != '‚¨ú' for row in board for cell in row):
        return 'draw'  
    
    return False
